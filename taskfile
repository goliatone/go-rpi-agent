#!/bin/bash

######### LOAD ENV FILE IF PRESENT #########
if [ -f .taskenv ]; then
    source .taskenv
fi

if [ -z ${RPI_USER+x} ]; then 
    RPI_USER=pi
fi

if [ -z ${RPI_HOST+x} ]; then 
    RPI_HOST=raspberry.local
fi

if [ -z ${RPI_UUID+x} ]; then 
    RPI_UUID=$(uuidgen)
fi

if [ -z ${SERVICE_NAME+x} ]; then 
    SERVICE_NAME=rpi-builder
fi

######### KEY MANAGEMENT #############
# Create certificates to be loaded in the remote machine
# to execute tasks
function certs:create {
    local email=${1:-$(git config --global --get user.email)}
    local certs=${2:-"$(pwd)/ops/certs/dkit_rsa"}

    ssh-keygen -t rsa -b 4096 -N "" -C "$email" -f $certs
}

# Install certificates in remote machin
# @arg 1 user [pi] SSH user
# @arg 2 host [raspberry] SSH host
# @arg 2 certs [./ops/certs/dkit_rsa] SSH identity key
function certs:install {
    local user=${1:-pi}
    local host=${2:-raspberry}
    local certs=${3:-"$(pwd)/ops/certs/dkit_rsa"}
    ssh-copy-id -i "$certs" $user@$host
}

function rpi:ssh {
    local user=${1:-$RPI_USER}
    local host=${2:-$RPI_HOST}

    ssh -i ./ops/certs/dkit_rsa $user@$host
}


function gvm:install {
    echo "go version should be go1.11"
    echo ""
    echo "run following commands"
    echo "gvm pkgset create go-rpi-builder"
    echo "gvm pkgset use go-rpi-builder"
    echo "go mod download"
}

function mac:build {
    mkdir -p ./bin/darwin
    echo "building rpi-agent..."
    go build -o ./bin/darwin/rpi-agent main.go
}

function rpi:build {
    mkdir -p ./bin/arm
    echo "building rpi-agent..."
    env GOOS=linux GOARCH=arm GOARM=5 go build -o ./bin/arm/rpi-agent main.go
}

function tag:upsert {
    local tag=${1}

    if [ -z "$tag" ]; then 
        echo $(tag:get)
    else 
        tag:set $tag
        echo $(tag:get)
    fi
}

function tag:get {
    local tag=$(cat ./.version)

    if [ -z "$tag" ]; then 
        tag="0.0.1"
        tag:set $tag
    fi

    echo $tag
}

function tag:set {
    local tag=${1}
    if [ -z "$tag" ]; then 
        exit 1
    fi

    echo -n "$tag" > "./.version"
}

function rpi:mv {
    echo ""
    echo "running rpi:mv..."
    
    local user=${1:-$RPI_USER}
    local host=${2:-$RPI_HOST}
    
    local dir=$(pwd)
    local certs="-i $dir/ops/certs/dkit_rsa"

    echo "stop rpi-agent service"
    ssh $certs $user@$host -C "sudo systemctl stop rpi-agent.service"

    #TODO: we prob want to give it a random name to prevent clashes
    echo "move agent tmp directory..."
    scp $certs ./bin/arm/rpi-agent $user@$host:/tmp/rpi-agent
    
    echo "move agent to final destination directory..."
    ssh $certs $user@$host -C "sudo mv /tmp/rpi-agent /usr/local/bin/rpi-agent"

    echo "start rpi-agent service"
    ssh $certs $user@$host -C "sudo systemctl start rpi-agent.service"
}

function release:build {
    echo ""
    echo "running release:build..."

    mkdir -p ./bin/arm
    
    VERSION=$(tag:upsert $1)
    BUILD_DATE=`date -u +%Y%m%d.%H%M%S`
    
    echo "go build ldflags -X main.VERSION=$VERSION -X main.BUILD_DATE=$BUILD_DATE"
    env GOOS=linux GOARCH=arm GOARM=5 go build -ldflags "-X main.VERSION=$VERSION -X main.BUILD_DATE=$BUILD_DATE" -o ./bin/arm/rpi-agent main.go
}

function release:update {
    echo ""
    echo "run release:upddate..."

    local user=${1:-$RPI_USER}
    local host=${2:-$RPI_HOST}
    local tag=$(tag:upsert $3)

    release:build $tag 
    rpi:mv $user $host
    test:service $host
}

# install binary and service on host machine
# We can pass an env file with values that will
# be available for the running service.
# 
# @arg 1 {string} [user=pi] Username
# @arg 2 {string} [host=raspberry] Hostname
# @arg 3 {string} envfile Env file used for service
# @arg 4 {string} [tag=0.0.1]
function service:install {
    echo "running service:install..."

    local user=${1:-$RPI_USER}
    local host=${2:-$RPI_HOST}
    local envfile=$3
    local tag=$(tag:upsert $4)

    local dir=$(pwd)
    local script="ops/scripts/installer"

    local certs="-i $dir/ops/certs/dkit_rsa"
    
    scp -i "$dir/ops/certs/dkit_rsa" -r "$dir/ops/service" "$user@$host":/tmp/

    release:build $tag

    rpi:mv $user $host

    echo "check for envfile in arguments..."

    if [ -z "$envfile" ]; then
        echo "we are using default env configuration for device..."
    else
        echo "creating remote temp file with env..."
        ssh -i ./ops/certs/dkit_rsa "$user@$host" -C "sudo -u$user mkdir -p /tmp/service/opt/$SERVICE_NAME/"
        
        echo "sending env file to remote host..."
        scp -i ./ops/certs/dkit_rsa "$envfile" "$user@$host":/tmp/service/opt/$SERVICE_NAME/$SERVICE_NAME.env 
    fi
    
    echo "start running installer script..."
    ssh -i ./ops/certs/dkit_rsa "$user@$host" 'bash -s' < "$dir/$script"

    test:service $host
}

# update binary and service on host machine
# @arg 1 {string} [user=pi] Username
# @arg 2 {string} [host=raspberry] Hostname
# @arg 3 {string} tag If present triggers binary build
# @arg 4 {string} envfile Env file used for service
function service:update {
    
    local user=${1:-$RPI_USER}
    local host=${2:-$RPI_HOST}
    local envfile=$4

    local dir=$(pwd)
    local certs="-i $dir/ops/certs/dkit_rsa"

    # if [ -z ${envfile+x} ]; then 
    if [ -z "$envfile" ]; then
        echo "use default env configuration for device $user@$host"
    else
        scp "$certs" "$envfile" "$user@$host":/opt/$SERVICE_NAME/$SERVICE_NAME.env 
    fi

    if [ -z "$3" ]; then
        echo "build a new release..."
        release:build $(tag:upsert $3)
    fi

    rpi:mv "$user" "$host"
}

# uninstall binary and service on host machine
# @arg 1 {string} [user=pi]
# @arg 2 {string} [host=raspberry]
function service:uninstall {
    local user=${1:-$RPI_USER}
    local host=${2:-$RPI_HOST}

    local dir=$(pwd)
    local script="ops/scripts/uninstaller"

    local certs="-i $dir/ops/certs/dkit_rsa"

    ssh "$certs" "$user@$host" 'bash -s' < "$dir/$script"
}

function test:service {
    echo ""
    echo "run test:service..."
    local host=${1:-$RPI_HOST}
    curl -s $host:8080 | jq
}

function version:bump {
    echo "TODO :)"
    # https://stackoverflow.com/questions/4485399/how-can-i-bump-a-version-number-using-bash
    # https://gist.github.com/andyexeter/da932c9644d832e3be6706d20d539ff7
}

function help {
    echo "run <task> <args>"
    echo "Tasks:"
    compgen -A function | grep -v '^_' | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time ${@:-help}

